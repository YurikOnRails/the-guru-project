#!/bin/bash -e

# Enable jemalloc for reduced memory usage and latency.
if [ -z "${LD_PRELOAD+x}" ]; then
    LD_PRELOAD=$(find /usr/lib -name libjemalloc.so.2 -print -quit)
    export LD_PRELOAD
fi

# Проверка и создание необходимых директорий
mkdir -p /rails/tmp/pids
mkdir -p /rails/log
mkdir -p /rails/storage/public
mkdir -p /rails/public/assets
mkdir -p /rails/public/packs

# Проверяем и настраиваем окружение для Rails credentials
if [ -n "$RAILS_MASTER_KEY" ]; then
    echo "$RAILS_MASTER_KEY" > config/master.key
    chmod 600 config/master.key
    echo "Created config/master.key from environment variable"
else
    echo "WARNING: RAILS_MASTER_KEY environment variable is not set!"
    if [ ! -f config/master.key ]; then
        echo "WARNING: config/master.key file does not exist and RAILS_MASTER_KEY is not set."
        
        # Не создаем фиктивный credentials.yml.enc, а используем SECRET_KEY_BASE
        if [ -f config/credentials.yml.enc ]; then
            echo "config/credentials.yml.enc exists but cannot be decrypted. Using environment variables instead."
        fi
    fi
fi

# Генерируем SECRET_KEY_BASE если он не задан
if [ -z "$SECRET_KEY_BASE" ]; then
    export SECRET_KEY_BASE=$(openssl rand -hex 64)
    echo "SECRET_KEY_BASE not set, generated random value"
fi

# Генерируем DEVISE_SECRET_KEY если он не задан
if [ -z "$DEVISE_SECRET_KEY" ]; then
    export DEVISE_SECRET_KEY=$(openssl rand -hex 64)
    echo "DEVISE_SECRET_KEY not set, generated random value"
fi

# Настраиваем дополнительные переменные для Rails
# Убеждаемся, что Rails будет использовать SECRET_KEY_BASE вместо credentials
# когда credentials недоступны
if [ ! -f config/master.key ] || [ ! -f config/credentials.yml.enc ]; then
    export RAILS_USE_FIPS=false
    export RAILS_DISABLE_DEPRECATED_TO_S_CONVERSION=true
    export RAILS_ENCRYPTION_PRIMARY_KEY=$SECRET_KEY_BASE
    echo "Set fallback encryption keys via environment variables"
fi

# Устанавливаем порт по умолчанию, если не определен
if [ -z "$PORT" ]; then
    export PORT=3000
    echo "PORT not set, defaulting to $PORT"
fi

# Запускаем скрипт проверки переменных окружения
if [ -f ./bin/check_env ]; then
    echo "Running environment check script..."
    ./bin/check_env || echo "Environment check exited with non-zero status. Continuing anyway."
fi

# If running the rails server then create or migrate existing database
if [ "${@: -2:1}" == "./bin/rails" ] && [ "${@: -1:1}" == "server" ]; then
    echo "Preparing database..."
    ./bin/rails db:prepare || {
        echo "Database preparation failed. Trying to create database..."
        ./bin/rails db:create && ./bin/rails db:migrate
    }
    
    # Проверка наличия и обслуживание assets в production
    if [ "$RAILS_ENV" = "production" ]; then
        if [ ! -d "public/assets" ] || [ -z "$(ls -A public/assets 2>/dev/null)" ]; then
            echo "Assets not found. Precompiling assets..."
            SECRET_KEY_BASE=$SECRET_KEY_BASE ./bin/rails assets:precompile || echo "Asset precompilation failed. Using bundled assets."
        fi
    fi
fi

# Вывод информации о запуске
echo "Starting server on port $PORT..."
echo "RAILS_ENV: $RAILS_ENV"

exec "${@}"
