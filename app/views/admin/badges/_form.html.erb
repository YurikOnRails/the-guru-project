<%= form_with(model: [:admin, @badge], local: true) do |f| %>
  <% if @badge.errors.any? %>
    <div class="alert alert-danger">
      <h2><%= pluralize(@badge.errors.count, "error") %> prohibited this badge from being saved:</h2>
      <ul>
        <% @badge.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-3">
    <%= f.label :title, class: 'form-label' %>
    <%= f.text_field :title, class: 'form-control' %>
  </div>

  <div class="mb-3">
    <%= f.label :image_url, class: 'form-label' %>
    <%= f.text_field :image_url, class: 'form-control' %>
  </div>

  <div class="mb-3">
    <%= f.label :description, class: 'form-label' %>
    <%= f.text_area :description, class: 'form-control' %>
  </div>

  <div class="mb-3">
    <%= f.label :rule_type, 'Правило получения', class: 'form-label' %>
    <%= f.select :rule_type, Badge::RULES, {}, class: 'form-select' %>
  </div>

  <div class="mb-3" data-rule-params>
    <div class="category-params" style="display: none;">
      <%= f.label :category_id, 'Категория', class: 'form-label' %>
      <%= f.select :rule_params, Category.all.map { |c| [c.name, { category_id: c.id }.to_json] }, {}, class: 'form-select' %>
    </div>

    <div class="level-params" style="display: none;">
      <%= f.label :level, 'Уровень', class: 'form-label' %>
      <%= f.select :rule_params, Test.distinct.pluck(:level).map { |l| [l, { level: l }.to_json] }, {}, class: 'form-select' %>
    </div>
  </div>

  <%= f.submit 'Сохранить', class: 'btn btn-primary' %>
<% end %>

<%= content_for :scripts do %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const ruleTypeSelect = document.querySelector('#badge_rule_type');
      const ruleParamsDiv = document.querySelector('[data-rule-params]');
      
      function updateRuleParams() {
        const selectedRule = ruleTypeSelect.value;
        const categoryParams = ruleParamsDiv.querySelector('.category-params');
        const levelParams = ruleParamsDiv.querySelector('.level-params');
        
        categoryParams.style.display = 'none';
        levelParams.style.display = 'none';
        
        if (selectedRule === 'category_complete') {
          categoryParams.style.display = 'block';
        } else if (selectedRule === 'level_complete') {
          levelParams.style.display = 'block';
        }
      }
      
      ruleTypeSelect.addEventListener('change', updateRuleParams);
      updateRuleParams();
    });
  </script>
<% end %> 